'use strict';

const HtmlElement = new function() {
    this.div = function(classes, body) {
        const div = $("<div/>").attr({class: (classes ? classes: "")});
        if(body) {
            div.append(body);
        }
        return div;
    };
    this.ul = function(classes, list) {
        const ul = $("<ul/>").attr({class: (classes ? classes: "")});
        if(list) {
            ul.append(list);
        }
        return ul;
    };
    this.li = function(classes, body) {
        const li = $("<li/>").attr({class: (classes ? classes: "")});
        if(body) {
            li.append(body);
        }
        return li;
    };
    this.a = function(classes, href, id, name, text, dataAttrs) {
        const a = $("<a/>").attr({
            class: (classes ? classes: ""),
            href: (href ? href: "javascript:;"),
            id: (id ? id: ""),
            name: (name ? name: "")
            }).append((text ? text: ""));
        if(dataAttrs) {
            for(let index=0; index<dataAttrs.length; index++) {
                a.attr("data-"+dataAttrs[index].attr, dataAttrs[index].value);
            }
        }
        return a;
    };
    this.img = function(src, classes){
        return $("<img/>").attr({src: src, class: (classes ? classes: "")})
    };
    this.icon = function(classes) {
        return $("<i/>").attr({class : classes});
    };
    this.label = function(classes, text) {
        return $("<label/>").attr({class: (classes ? classes: "")}).html(text);
    };
    this.input = function(type, classes, id, name, placeholder, value, dataAttrs) {
        const input = $("<input/>").attr({
                        type: type,
                        class: (classes ? classes: ""),
                        id: (id ? id: ""),
                        name: (name ? name: ""),
                        placeholder: (placeholder ? placeholder: ""),
                        value: (value ? value: "")
                        });
        if(dataAttrs) {
            for(let index=0; index<dataAttrs.length; index++) {
                input.attr("data-"+dataAttrs[index].attr, dataAttrs[index].value);
            }
        }
        return input;
    };
};

const HTMLStyle = new function() {
    this.contextOfFolder = function(folder) {
        const ul = HtmlElement.ul("dropdown-menu w-auto position-absolute");
        ul.append(HtmlElement.li(undefined, HtmlElement.a("dropdown-item folder-name", undefined, folder.id, folder.name, "Open")));
        //ul.append(HtmlElement.li(undefined, HtmlElement.a("dropdown-item disabled", undefined, folder.id, folder.name, "Rename")));
        //ul.append(HtmlElement.li(undefined, HtmlElement.a("dropdown-item disabled", undefined, folder.id, folder.name, "Delete")));
        ul.append(HtmlElement.li(undefined, HtmlElement.a("dropdown-item folder-properties", undefined, folder.id, folder.name, "Properties")));
        return ul;
    };
    this.contextOfFile = function(file, shared, sharedFilesByYou, sharedFilesWithYou) {
        const ul = HtmlElement.ul("dropdown-menu w-auto position-absolute file-context");
        const dataAttrs = [];
        dataAttrs.push({attr: "shared", value: shared});
        dataAttrs.push({attr: "type", value: File.type(file.name)});
        ul.append(HtmlElement.li(undefined, HtmlElement.a("dropdown-item open-file", undefined, file.id, file.originalName, "Open", dataAttrs)));
        if(!shared) {
            ul.append(HtmlElement.li(undefined, HtmlElement.a("dropdown-item share-file", undefined, file.id, file.originalName, "Share", dataAttrs)));
            ul.append(HtmlElement.li(undefined, HtmlElement.a("dropdown-item rename-file", undefined, file.id, file.originalName, "Rename", dataAttrs)));
            ul.append(HtmlElement.li(undefined, HtmlElement.a("dropdown-item delete-file", undefined, file.id, file.originalName, "Delete", dataAttrs)));
        }
        ul.append(HtmlElement.li(undefined, HtmlElement.a("dropdown-item download", undefined, file.id, file.originalName, "Download", dataAttrs)));
        ul.append(HtmlElement.li(undefined, HtmlElement.a("dropdown-item file-properties", undefined, file.id, file.originalName, "Properties", dataAttrs)));
        if(sharedFilesByYou) {
            ul.append(HtmlElement.li(undefined, HtmlElement.a("dropdown-item file-shared-with", undefined, file.id, file.originalName, "Shared With", dataAttrs)));
        }
        if(sharedFilesWithYou) {
            ul.append(HtmlElement.li(undefined, HtmlElement.a("dropdown-item file-shared-by", undefined, file.id, file.originalName, "Shared By", dataAttrs)));
        }
        return ul;
    };
    this.listViewDetailRow = function(data, isFile) {
        const divM = HtmlElement.div("col-sm-4 col-md-4 col-lg-4 col-xl-4 col-xxl-4");
        if(isFile) {
            const divR1 = HtmlElement.div("row");
            const divR1C1 = HtmlElement.div("col-sm-6 col-md-6 col-lg-6 col-xl-6 col-xxl-6 text-end fs-s text-muted");
            divR1C1.append("Date modified:");
            divR1.append(divR1C1);
            const divR1C2 = HtmlElement.div("col-sm-6 col-md-6 col-lg-6 col-xl-6 col-xxl-6 fs-s text-muted");
            divR1C2.append(data.createdDateTime);
            divR1.append(divR1C2);
            divM.append(divR1);

            const divR2 = HtmlElement.div("row");
            const divR2C1 = HtmlElement.div("col-sm-6 col-md-6 col-lg-6 col-xl-6 col-xxl-6 text-end fs-s text-muted");
            divR2C1.append("Size:");
            divR2.append(divR2C1);
            const divR2C2 = HtmlElement.div("col-sm-6 col-md-6 col-lg-6 col-xl-6 col-xxl-6 fs-s text-muted");
            divR2C2.append(File.convertKbToMb(data.size));
            divR2.append(divR2C2);
            divM.append(divR2);
        }else {
            let callBack = function(response) {
                if(response.success) {
                    var property = response.data.property;
                    const divR1 = HtmlElement.div("row");
                    const divR1C1 = HtmlElement.div("col-sm-6 col-md-6 col-lg-6 col-xl-6 col-xxl-6 text-end fs-s text-muted");
                    divR1C1.append("Date modified:");
                    divR1.append(divR1C1);
                    const divR1C2 = HtmlElement.div("col-sm-6 col-md-6 col-lg-6 col-xl-6 col-xxl-6 fs-s text-muted");
                    divR1C2.append(property.createdDateTime);
                    divR1.append(divR1C2);
                    divM.append(divR1);

                    const divR2 = HtmlElement.div("row");
                    const divR2C1 = HtmlElement.div("col-sm-6 col-md-6 col-lg-6 col-xl-6 col-xxl-6 text-end fs-s text-muted");
                    divR2C1.append("Size:");
                    divR2.append(divR2C1);
                    const divR2C2 = HtmlElement.div("col-sm-6 col-md-6 col-lg-6 col-xl-6 col-xxl-6 fs-s text-muted");
                    divR2C2.append(File.convertKbToMb(property.size));
                    divR2.append(divR2C2);
                    divM.append(divR2);
                }
            };
            AjaxUtil.GET({
                url: File.context+"/api/folder/"+data.id,
                callBack: callBack
            });
        }
        return divM;
    };
    this.createFolder = function(folder, view) {
        var rowClasses = "col-sm-5 col-md-5 col-lg-5 col-xl-5 col-xxl-5";
        var nameClasses = "col-sm-11 col-md-11 col-lg-11 col-xl-11 col-xxl-11";
        var iconClasses = "col-sm-1 col-md-1 col-lg-1 col-xl-1 col-xxl-1";
        if(view === "list" && ($(window).width() >= 1024)) {
            rowClasses = "col-sm-12 col-md-12 col-lg-12 col-xl-12 col-xxl-12 folder-box";
            nameClasses = "col-sm-7 col-md-7 col-lg-7 col-xl-7 col-xxl-7 pt-2";
            iconClasses = "col-sm-1 col-md-1 col-lg-1 col-xl-1 col-xxl-1 w-auto pt-2";
        }
        const divCol = HtmlElement.div(rowClasses+" py-2 border border-1 rounded-1 folder-box");
        const divColR = HtmlElement.div("row position-relative");
        const divColIcon = HtmlElement.div(iconClasses);
        divColIcon.append(HtmlElement.icon("fa fa-folder text-success"));
        divColR.append(divColIcon);
        const a = HtmlElement.a(nameClasses+" folder-name text-decoration-none text-dark text-ellipsis", undefined, folder.id, folder.name, folder.name);
        a.attr("title", "Right-click for more actions.");
        divColR.append(a);
        if(view === "list" && ($(window).width() >= 1024)) {
            divColR.append(HTMLStyle.listViewDetailRow(folder, false));
        }
        divColR.append(HTMLStyle.contextOfFolder(folder));
        divCol.append(divColR);
        return divCol;
    };
    this.createFile = function(file, view, shared, sharedFilesByYou, sharedFilesWithYou) {
        var rowClasses = "col-sm-5 col-md-5 col-lg-5 col-xl-5 col-xxl-5";
        var nameClasses = "col-sm-11 col-md-11 col-lg-11 col-xl-11 col-xxl-11 edit-file-"+file.id;
        var iconClasses = "col-sm-1 col-md-1 col-lg-1 col-xl-1 col-xxl-1";
        if(view === "list" && ($(window).width() >= 1024)) {
            rowClasses = "col-sm-12 col-md-12 col-lg-12 col-xl-12 col-xxl-12";
            nameClasses = "col-sm-7 col-md-7 col-lg-7 col-xl-7 col-xxl-7 pt-2 edit-file-"+file.id;
            iconClasses = "col-sm-1 col-md-1 col-lg-1 col-xl-1 col-xxl-1 w-auto pt-2";
        }
        const divCol = HtmlElement.div(rowClasses+" col-xxl-5 py-2 border border-1 rounded-1");
        const divColR = HtmlElement.div("row position-relative");
        const divColIcon = HtmlElement.div(iconClasses);
        divColIcon.append(HtmlElement.icon("fa "+File.icon(file.name)+" text-success"));
        divColR.append(divColIcon);
        const dataAttrs = [];
        dataAttrs.push({attr: "shared", value: shared});
        dataAttrs.push({attr: "type", value: File.type(file.name)});
        const a = HtmlElement.a(nameClasses+" file-name open-file text-decoration-none text-dark text-ellipsis", undefined, file.id, file.originalName, file.originalName, dataAttrs);
        a.attr("title", "Right-click for more actions.");
        divColR.append(a);
        if(view === "list" && ($(window).width() >= 1024)) {
            divColR.append(HTMLStyle.listViewDetailRow(file, true));
        }
        divColR.append(HTMLStyle.contextOfFile(file, shared, sharedFilesByYou, sharedFilesWithYou));
        divCol.append(divColR);
        return divCol;
    };
    this.breadcrumb = function(context, data, active) {
        var elements = "";
        if(data) {
            if(data.prev) {
                elements += HTMLStyle.breadcrumb(context, data.prev, false);
            }
            if(active) {
                elements += "<li class='breadcrumb-item active'>"+data.name+"</li>";
            }else if(data.id){
                elements += "<li class='breadcrumb-item'><a href='javascript:;' class='folder-name text-decoration-none' id='"+data.id+"'>"+data.name+"</a></li>";
            }else {
                elements += "<li class='breadcrumb-item'><a href='"+context+"' class='text-decoration-none'>"+data.name+"</a></li>";
            }
        }
        return elements;
    };
};

const Folder = new function() {
    this.selected = "0";
    this.refresh = function() {
        window.location.reload();
    };
    this.open = function(folderId) {
        Folder.selected = folderId;
        AjaxUtil.GET({
            url: Folder.context+"/api/drive/"+folderId,
            callBack: Drive.open
        });
    };
    this.properties = function(id, folderName) {
        var myModal = new bootstrap.Modal(Modal.fileViewModal.id[0], {
            keyboard: false
        });
        Modal.fileViewModal.title.empty().append(HtmlElement.icon("fa fa-folder text-success")).append("Folder Properties");
        Modal.fileViewModal.id.find(".header-custom").remove();
        Modal.fileViewModal.dialog.removeClass("modal-xl");
        Modal.fileViewModal.dialog.addClass("modal-lg");
        Modal.fileViewModal.body.empty();
        let callBack = function(response) {
            if(response.success) {
                var property = response.data.property;
                const mainDiv = HtmlElement.div();
                mainDiv.append(File.buildProp("Name", property.name));
                mainDiv.append(File.buildProp("Folders", property.folders));
                mainDiv.append(File.buildProp("Files", property.files));
                mainDiv.append(File.buildProp("Size", File.convertKbToMb(property.size)));
                mainDiv.append(File.buildProp("Created Date Time", property.createdDateTime));
                Modal.fileViewModal.body.append(mainDiv);
                myModal.show();
            }
        };
        AjaxUtil.GET({
            url: File.context+"/api/folder/"+id,
            callBack: callBack
        });
    };
    this.initialize = function() {
        this.context = $("#container").data("context");
        this.selected = "0";
        Modal.createFolderModal.btnSave.on("click", function(e) {
            e.preventDefault();
            if(Modal.createFolderModal.folderName.val().trim() != "") {
                var callBack = function(response) {
                    if(response.success) {
                       Folder.open(response.persistId);
                       Modal.createFolderModal.id.modal('hide');
                       Message.success("Folder created successfully!");
                    }else if(response.advisories){
                       Message.error(response.advisories[0].message);
                    }
                };
                AjaxUtil.POST({
                    url: Folder.context+"/api/folder",
                    data: {name: Modal.createFolderModal.folderName.val(), parent :{id: Folder.selected}},
                    callBack: callBack
                });
            }else {
               Modal.createFolderModal.folderName.addClass("is-invalid");
            }
        });
        Modal.createFolderModal.folderName.on("focus", function(e){
            e.preventDefault();
            $(this).removeClass("is-invalid");
        });
        Modal.createFolderModal.btnCancel.on("click", function(e) {
            e.preventDefault();
            Modal.createFolderModal.folderName.removeClass("is-invalid");
            Modal.createFolderModal.folderName.val("");
        });
        Modal.createFolderModal.btnClose.on("click", function(e) {
            e.preventDefault();
            Modal.createFolderModal.folderName.removeClass("is-invalid");
            Modal.createFolderModal.folderName.val("");
        });
    };
};

const Modal = new function() {
    this.initialize = function() {
        this.fileViewModal =  {
            id : $("#fileViewModal"),
            title : $("#fileViewModal").find(".modal-title"),
            dialog : $("#fileViewModal").find(".modal-dialog"),
            body : $("#fileViewModal").find(".modal-body")
        };
        this.fileShareModal = {
            id: $("#fileShareModal"),
            title : $("#fileShareModal").find(".modal-title"),
            body : $("#fileShareModal").find(".modal-body")
        };
        this.createFolderModal = {
            id: $('#createFolderModal'),
            btnSave: $('#createFolderModal').find("#btnCreateFolder"),
            btnCancel: $('#createFolderModal').find("#btnCancelFolder"),
            btnClose: $('#createFolderModal').find(".btn-close"),
            folderName: $('#createFolderModal').find("#folder-name")
        };
        this.uploadFileModal = {
            id : $("#uploadFileModal"),
            btnSave : $("#uploadFileModal").find("#btnUploadFile"),
            btnCancel : $("#uploadFileModal").find("#btnCancelFile"),
            btnClose : $("#uploadFileModal").find(".btn-close"),
            uploadFiles : $("#uploadFileModal").find("#uploadFiles")
        };
    };
};
Modal.initialize();

const File = new function() {
    this.getType = function(type) {
        const allowedTypes = {
            'image/jpeg': 'Image (.jpeg)',
            'image/png': 'Image (.png)',
            'image/gif': 'Image (.gif)',
            'image/jpg': 'Image (.jpg)',
            'application/pdf': 'Portable Document Format (.pdf)',
            'application/msword': 'Microsoft Word Document (.docx)',
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'Microsoft Word Document (.docx)',
            'text/plain': 'Text Document (.txt)',
            'application/vnd.ms-excel': 'Microsoft Excel Worksheet (.xlsx)',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'Microsoft Excel Worksheet (.xlsx)'
        };
        return allowedTypes[type];
    };
    this.type = function(fileName) {
        if(File.isImage(fileName)) {
            return "jpg";
        }else if(File.isPdf(fileName)){
            return "pdf";
        }else if(File.isDoc(fileName)){
            return "doc";
        }else if(File.isXls(fileName)){
            return "xls";
        }else {
            return "txt";
        }
    };
    this.fileIcons = {
       'pdf': 'fa-file-pdf', // CSS class for PDF icon
       'doc': 'fa-file-word', // CSS class for Word icon
       'docx': 'fa-file-word', // CSS class for Word icon
       'xls': 'fa-file-excel', // CSS class for Excel icon
       'xlsx': 'fa-file-excel', // CSS class for Excel icon
       'jpg': 'fa-image', // CSS class for JPEG icon
       'jpeg': 'fa-image', // CSS class for JPEG icon
       'png': 'fa-image', // CSS class for PNG icon
       'gif': 'fa-image', // CSS class for GIF icon
       'txt': 'fa-file-lines', // CSS class for Text file icon
       'default': 'fa-file' // CSS class for default icon
    };
    this.getFileExtension = function(fileName) {
        return fileName.split('.').pop().toLowerCase();
    };
    this.icon = function(fileName) {
        const ext = File.getFileExtension(fileName);
        return File.fileIcons[ext] || File.fileIcons["default"];
    };
    this.isPdf = function(fileName) {
        var icons = {
           'pdf': 'fa-file-pdf'
        };
        const ext = File.getFileExtension(fileName);
        if(icons[ext]) {
            return true;
        } else {
            return false;
        }
    };
    this.isDoc = function(fileName) {
        var icons = {
           'doc': 'fa-file-word',
           'docx': 'fa-file-word'
        };
        const ext = File.getFileExtension(fileName);
        if(icons[ext]) {
            return true;
        } else {
            return false;
        }
    };
    this.isXls = function(fileName) {
        var icons = {
           'xls': 'fa-file-excel',
           'xlsx': 'fa-file-excel'
        };
        const ext = File.getFileExtension(fileName);
        if(icons[ext]) {
            return true;
        } else {
            return false;
        }
    };
    this.isImage = function(fileName) {
        var imageIcons = {
           'jpg': 'fa-image',
           'jpeg': 'fa-image',
           'png': 'fa-image',
           'gif': 'fa-image'
        };
        const ext = File.getFileExtension(fileName);
        if(imageIcons[ext]) {
            return true;
        } else {
            return false;
        }
    };
    this.show = function(el) {
        var id = $(el).attr("id"), fileName = $(el).attr("name"), type = $(el).data("type"), shared = $(el).data("shared");
        var myModal = new bootstrap.Modal(Modal.fileViewModal.id[0], {
            keyboard: false
        });
        Modal.fileViewModal.title.empty().append(HtmlElement.icon("fa "+(File.fileIcons[type] || File.fileIcons['default'])+" text-success")).append("&nbsp;").append(fileName);
        Modal.fileViewModal.body.empty();
        const div = HtmlElement.div("col-sm-12 border-bottom border-success pe-2 header-custom");
        const dataAttrs = [];
        dataAttrs.push({attr:"type", value: type});
        div.append(HtmlElement.a("float-end btn btn-sm download-view-file", undefined, id, fileName, HtmlElement.icon("fa-solid fa-download text-success"), dataAttrs));
        if(!shared) {
            div.append(HtmlElement.a("float-end btn btn-sm share-view-file", undefined, id, fileName, HtmlElement.icon("fa-solid fa-share-nodes text-success"), dataAttrs));
        }
        Modal.fileViewModal.id.find(".header-custom").remove();
        Modal.fileViewModal.body.before(div);
        Modal.fileViewModal.body.addClass("text-center");
        Modal.fileViewModal.dialog.addClass("modal-xl");
        Modal.fileViewModal.dialog.removeClass("modal-lg");
        if(type === "jpg") {
            Modal.fileViewModal.body.append(HtmlElement.img(File.context+"/api/file/image/"+id+"?shared="+shared, "img-fluid"));
        }else if(type === "pdf") {
            const canvas = $("<canvas/>").attr({id: "pdf-canvas"});
            Modal.fileViewModal.body.append(canvas);
            const pdfjsLib = window['pdfjs-dist/build/pdf'];
            pdfjsLib.GlobalWorkerOptions.workerSrc = File.context+'/js/thirdparty/pdf.worker.min.js';
            const url = File.context+"/api/file/pdf/"+id+"?shared="+shared;
            pdfjsLib.getDocument(url).promise.then((pdf) => {
                pdf.getPage(1).then((page) => {
                    const scale = 1.5;
                    const viewport = page.getViewport({ scale });
                    const canvas = document.getElementById('pdf-canvas');
                    const context = canvas.getContext('2d');
                    canvas.height = viewport.height;
                    canvas.width = viewport.width;
                    const renderContext = {
                        canvasContext: context,
                        viewport: viewport
                    };
                    page.render(renderContext);
                });
            });
        }else if(type === "doc") {
            async function showDoc() {
                function display(result) {
                     Modal.fileViewModal.body.removeClass("text-center");
                     Modal.fileViewModal.body.html(result.value);
                }
                function showError(e) {}
                const response = await fetch(File.context+"/api/file/other/"+id+"?shared="+shared);
                if (!response.ok) {
                    text.textContent = 'Error: Unable to fetch the file.';
                    return;
                }
                const arrayBuffer = await response.arrayBuffer();
                mammoth.convertToHtml({ arrayBuffer: arrayBuffer })
                .then(display)
                .catch(showError);
            }
            showDoc();
        }else if(type === "xls") {
            async function showXls() {
                const response = await fetch(File.context+"/api/file/other/"+id+"?shared="+shared);
                if (!response.ok) {
                    document.getElementById('output').innerHTML = 'Error: Unable to fetch the file.';
                    return;
                }
                const arrayBuffer = await response.arrayBuffer();
                const workbook = XLSX.read(arrayBuffer, { type: 'array' });
                let html = '';
                workbook.SheetNames.forEach(sheetName => {
                    const worksheet = workbook.Sheets[sheetName];
                    html += XLSX.utils.sheet_to_html(worksheet);
                });
                Modal.fileViewModal.body.removeClass("text-center");
                Modal.fileViewModal.body.html(html);
                Modal.fileViewModal.body.find("table").find("td").addClass("border");
            }
            showXls();
        }else if(type === "txt") {
            async function showText() {
                const text = document.createElement('pre');
                const response = await fetch(File.context+"/api/file/other/"+id+"?shared="+shared);
                if (!response.ok) {
                    text.textContent = 'Error: Unable to fetch the file.';
                    return;
                }
                const arrayBuffer = await response.arrayBuffer();
                const textDecoder = new TextDecoder();
                text.textContent = textDecoder.decode(arrayBuffer);
                Modal.fileViewModal.body.removeClass("text-center");
                Modal.fileViewModal.body.append(text);
            }
            showText();
        }
        myModal.show();
        $(".download-view-file").on("click", function(e) {
            e.preventDefault();
            File.download($(this).attr("id"), $(this).attr("name"));
        });
        $(".share-view-file").on("click", function(e) {
            e.preventDefault();
            File.share(this);
        });
    };
    this.validateShareUser = function(userId) {
        var status = true;
        Modal.fileShareModal.body.find(".selected-users").find("span").each(function(index) {
            if(parseInt(userId) === parseInt($(this).attr("id"))) {
               status = false;
            }
        });
        return status;
    };
    this.renameContext = function(disabled) {
        const renameFile = $(".file-context").find(".rename-file");
        if(disabled) {
            renameFile.addClass("disabled");
        }else {
           renameFile.removeClass("disabled");
        }
    };
    this.rename = function(id, fileName) {
        const element = $(".edit-file-"+id);
        element.replaceWith(HtmlElement.input("text", "col-sm-10 col-md-10 col-lg-10 col-xl-10 col-xxl-10", undefined, undefined, undefined, fileName));
        element.find("input").after(HtmlElement.a("col-sm-1 col-md-1 col-lg-1 col-xl-1 col-xxl-1 close", undefined, undefined, undefined, HtmlElement.icon("fa-solid fa-xmark text-danger")));
        File.renameContext(true);
        element.find("input").keydown(function(event) {
             if (event.keyCode === 13) { // 13 is the Enter key
                if($(this).val().trim() != "") {
                    let callBack = function(response) {
                        if(response.success) {
                            File.renameContext(false);
                            Drive.refresh("File renamed successfully!");
                        }
                    };
                    AjaxUtil.PUT({
                        url: File.context+"/api/file/rename",
                        data: {id: id, name : $(this).val().trim()},
                        callBack: callBack
                    });
                }
             }
        });
        element.find(".close").on("click", function(e) {
            e.preventDefault();
            File.renameContext(false);
            Drive.refresh();
        });
    };
    this.share = function(el) {
        var id = $(el).attr("id"), filename = $(el).attr("name"), type = $(el).data("type");
        var fileId = id;
        var myModal = new bootstrap.Modal(Modal.fileShareModal.id[0], {
            keyboard: false
        });
        Modal.fileShareModal.title.empty().append(HtmlElement.icon("fa "+(File.fileIcons[type] || File.fileIcons["default"])+" text-success")).append("&nbsp;").append(filename);
        Modal.fileShareModal.body.empty();
        const divInput = HtmlElement.div("mb-3 mt-3");
        divInput.append(HtmlElement.label(undefined, "Email:"));
        divInput.append(HtmlElement.input("text", "form-control search-users", undefined, undefined, "Search by email"));
        divInput.append(HtmlElement.div("invalid-feedback", "Please choose at-least one user."));
        divInput.append(HtmlElement.div("user-results list-group"));
        Modal.fileShareModal.body.append(divInput);
        Modal.fileShareModal.body.append(HtmlElement.div("mb-3 mt-3 selected-users"));
        Modal.fileShareModal.body.find(".search-users").on("blur", function(e) {
            setTimeout(function() {Modal.fileShareModal.body.find(".user-results").empty();}, 1000);
        });
        const modalSearchUsers = Modal.fileShareModal.id.find(".search-users");
        modalSearchUsers.on("keyup", function(e) {
            var query = $(this).val();
            modalSearchUsers.removeClass("is-invalid");
            var callBack = function(response) {
                const modalUserResults = Modal.fileShareModal.body.find(".user-results");
                modalUserResults.empty();
                if(response.data) {
                    if(response.data.length > 0) {
                        for(let index=0; index<response.data.length; index++) {
                            const displayName = response.data[index].firstName +" "+response.data[index].lastName;
                            const a = $("<a/>").attr({class: "list-group-item list-group-item-action event", href:"javascript:;", id: response.data[index].id, name: displayName});
                            a.append(response.data[index].email).append(" (").append(displayName).append(")");
                            modalUserResults.append(a);
                        }
                    }else {
                        const a = $("<a/>").attr({class: "list-group-item list-group-item-action", href:"javascript:;"});
                        a.append("No user found.");
                        modalUserResults.append(a);
                    }
                    const modalSelectedUsers = Modal.fileShareModal.body.find(".selected-users");
                    modalUserResults.find(".list-group-item-action.event").on("click", function(e) {
                        e.preventDefault();
                        const a = $("<a/>").attr({class: "btn-remove text-white", href:"javascript:;", id: $(this).attr("id")}).append('<i class="fa fa-xmark"></i>');
                        const span = $("<span/>").attr({class: "btn btn-dark me-1 selected-user-"+$(this).attr("id"), id: $(this).attr("id")}).append($(this).attr("name")).append("&nbsp;&nbsp;").append(a);
                        if(File.validateShareUser($(this).attr("id"))) {
                            modalSelectedUsers.append(span);
                        }
                        modalUserResults.empty();
                        modalSearchUsers.val("");
                        modalSelectedUsers.find(".btn-remove").on("click", function(e){
                            e.preventDefault();
                            modalSelectedUsers.find(".selected-user-"+$(this).attr("id")).remove();
                        });
                    });
                }
            };
            AjaxUtil.GET({
                url: File.context+"/api/user/search?keyword="+query,
                callBack: callBack
            });
        });
        Modal.fileShareModal.id.find(".btnShareFile").on("click", function(e) {
            e.preventDefault();
            var toUsers = [];
            Modal.fileShareModal.body.find(".selected-users").find("span").each(function(index) {
                toUsers.push({id: $(this).attr("id")});
            });
            if(toUsers.length> 0 ) {
                let callBack = function(response) {
                    if(response.success) {
                        myModal.hide();
                        Drive.refresh("File shared successfully!");
                    }
                };
                AjaxUtil.POST({
                    url: File.context+"/api/file/share",
                    data: {toUsers: toUsers, file : {id: fileId}},
                    callBack: callBack
                });
            }else {
                modalSearchUsers.addClass("is-invalid");
            }
        });
        myModal.show();
    };
    this.buildProp = function(label, value) {
        var divRow = HtmlElement.div("row justify-content-around border-bottom", HtmlElement.div("col-4 border-start", label));
        divRow.append(HtmlElement.div("col-8 border-start border-end", value));
        return divRow;
    };
    this.convertKbToMb = function(kb) {
        if(kb == 1024) {
             return "1MB";
        }else if(kb < 1024) {
            return kb +"KB";
        }else {
            return (kb/1024).toFixed(2) +"MB";
        }
    };
    this.buildPath = function(path) {
        return "My Drive"+path;
    };
    this.sharedWith = function(id, fileName) {
        var myModal = new bootstrap.Modal(document.getElementById('fileViewModal'), {
            keyboard: false
        });
        Modal.fileViewModal.title.empty().append("Shared details");
        Modal.fileViewModal.dialog.removeClass("modal-xl");
        Modal.fileViewModal.dialog.addClass("modal-lg");
        Modal.fileViewModal.body.empty();
        let callBack = function(response) {
            if(response.success) {
                var nameColClasses = "col-sm-3 col-md-3 col-lg-3 col-xl-3 col-xxl-3 border";
                var emailColClasses = "col-sm-4 col-md-4 col-lg-4 col-xl-4 col-xxl-4 border";
                var dateTimeColClasses = "col-sm-3 col-md-3 col-lg-3 col-xl-3 col-xxl-3 border";
                var actionColClasses = "col-sm-2 col-md-2 col-lg-2 col-xl-2 col-xxl-2 border";
                var sharedFile = response.data;
                const mainDiv = HtmlElement.div("row");
                mainDiv.append(HtmlElement.div(nameColClasses+" fw-bold", "Shared To"));
                mainDiv.append(HtmlElement.div(emailColClasses+" fw-bold", "Email"));
                mainDiv.append(HtmlElement.div(dateTimeColClasses+" fw-bold", "Datetime"));
                mainDiv.append(HtmlElement.div(actionColClasses+" fw-bold", "Actions"));
                Modal.fileViewModal.body.append(mainDiv);
                if(sharedFile) {
                    for(let index=0; index<sharedFile.toUsers.length; index++) {
                        const sharedInfo = sharedFile.toUsers[index];
                        const userDiv = HtmlElement.div("row");
                        const userInfo = sharedInfo.userDTO.firstName+" "+sharedInfo.userDTO.lastName;
                        userDiv.append(HtmlElement.div(nameColClasses, userInfo));
                        userDiv.append(HtmlElement.div(emailColClasses, sharedInfo.userDTO.email));
                        userDiv.append(HtmlElement.div(dateTimeColClasses, sharedInfo.sharedDateTime));
                        const dataAttrs = [];
                        dataAttrs.push({attr:"shared-file-id", value: sharedFile.id});
                        dataAttrs.push({attr:"shared-file-to-user-id", value: sharedInfo.id});
                        dataAttrs.push({attr:"name", value: sharedInfo.userDTO.firstName+" "+sharedInfo.userDTO.lastName});
                        const aRevokeAccess = HtmlElement.a("revoke-access", undefined, undefined, undefined, HtmlElement.icon("fa-solid fa-user-xmark text-danger"), dataAttrs);
                        aRevokeAccess.attr("title", "Revoke access");
                        userDiv.append(HtmlElement.div(actionColClasses, aRevokeAccess));
                        Modal.fileViewModal.body.append(userDiv);
                    }
                }else {
                    const emptyDiv = HtmlElement.div("row");
                    emptyDiv.append(HtmlElement.div("col-sm-12 col-md-12 col-lg-12 col-xl-12 col-xxl-12 text-danger", "No details available."));
                    Modal.fileViewModal.body.append(emptyDiv);
                }
                myModal.show();
                $(".revoke-access").on("click", function(e) {
                    e.preventDefault();
                    var sharedFileId = $(this).data("shared-file-id");
                    var sharedFileToUserId = $(this).data("shared-file-to-user-id");
                    var name = $(this).data("name");
                    let callBackConfirm = function() {
                        let callBack = function(response) {
                            Drive.refresh(name+" has been removed from this file.");
                        };
                        AjaxUtil.DELETE({
                            url: File.context+"/api/file/revoke/access/"+sharedFileId+"/"+sharedFileToUserId,
                            callBack: callBack
                        });
                    };
                    Message.confirm("Yes, Revoke the access!", "Are you sure you want to revoke access to this file of recipient: "+name+"? This will prevent the recipient from viewing or editing it.", callBackConfirm);
                });
            }
        };
        AjaxUtil.GET({
            url: File.context+"/api/file/"+id+"/shared/detail",
            callBack: callBack
        });
    };
    this.sharedBy = function(id, fileName) {
        var myModal = new bootstrap.Modal(document.getElementById('fileViewModal'), {
            keyboard: false
        });
        Modal.fileViewModal.title.empty().append("Shared details");
        Modal.fileViewModal.dialog.removeClass("modal-xl");
        Modal.fileViewModal.dialog.addClass("modal-lg");
        Modal.fileViewModal.body.empty();
        let callBack = function(response) {
            if(response.success) {
                var nameColClasses = "col-sm-7 col-md-7 col-lg-7 col-xl-7 col-xxl-7 border";
                var dateTimeColClasses = "col-sm-5 col-md-5 col-lg-5 col-xl-5 col-xxl-5 border";
                var sharedFile = response.data;
                const mainDiv = HtmlElement.div("row");
                mainDiv.append(HtmlElement.div(nameColClasses+" fw-bold", "Shared By"));
                mainDiv.append(HtmlElement.div(dateTimeColClasses+" fw-bold", "Email"));
                Modal.fileViewModal.body.append(mainDiv);
                if(sharedFile) {
                    const sharedInfo = sharedFile.sharedBy;
                    const userDiv = HtmlElement.div("row");
                    const userInfo = sharedInfo.firstName+" "+sharedInfo.lastName;
                    userDiv.append(HtmlElement.div(nameColClasses, userInfo));
                    userDiv.append(HtmlElement.div(dateTimeColClasses, sharedInfo.email));
                    Modal.fileViewModal.body.append(userDiv);
                }else {
                    const emptyDiv = HtmlElement.div("row");
                    emptyDiv.append(HtmlElement.div("col-sm-12 col-md-12 col-lg-12 col-xl-12 col-xxl-12 text-danger", "No details available."));
                    Modal.fileViewModal.body.append(emptyDiv);
                }
                myModal.show();
            }
        };
        AjaxUtil.GET({
            url: File.context+"/api/file/"+id+"/shared/detail",
            callBack: callBack
        });
    };
    this.properties = function(id, fileName) {
        var myModal = new bootstrap.Modal(document.getElementById('fileViewModal'), {
            keyboard: false
        });
        Modal.fileViewModal.title.empty().append("File Properties");
        Modal.fileViewModal.dialog.removeClass("modal-xl");
        Modal.fileViewModal.dialog.addClass("modal-lg");
        Modal.fileViewModal.body.empty();
        let callBack = function(response) {
            if(response.success) {
                var file = response.data;
                const mainDiv = HtmlElement.div("");
                mainDiv.append(File.buildProp("Name", file.originalName));
                mainDiv.append(File.buildProp("Type", File.getType(file.type)));
                mainDiv.append(File.buildProp("Location", File.buildPath(file.path)));
                mainDiv.append(File.buildProp("Size", File.convertKbToMb(file.size)));
                mainDiv.append(File.buildProp("Modified Date Time", file.createdDateTime));
                Modal.fileViewModal.body.append(mainDiv);
                myModal.show();
            }
        };
        AjaxUtil.GET({
            url: File.context+"/api/file/"+id,
            callBack: callBack
        });
    };
    this.delete = function(id, filename) {
        let callBackConfirm = function() {
            let callBack = function(response) {
                Drive.refresh("File deleted successfully!");
            };
            AjaxUtil.DELETE({
                url: File.context+"/api/file/"+id,
                callBack: callBack
            });
        };
        Message.confirm("Yes, Delete it!", "Would you like to delete this file?", callBackConfirm);
    };
    this.download = function(id, filename) {
        const link = document.createElement('a');
        link.href = File.context+"/api/file/download/"+id;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        //document.body.removeChild(link);
    };
    this.upload = function(e) {
        e.preventDefault();
        var files = Modal.uploadFileModal.uploadFiles[0].files;
        if(files === undefined || files.length === 0) {
            Modal.uploadFileModal.uploadFiles.addClass("is-invalid");
            Modal.uploadFileModal.uploadFiles.closest(".invalid-feedback").append("Please choose a file/Or files or valid file format. Allowed types: JPG, PNG, PDF, DOC, DOCX, TXT, XLS, XLSX.");
            return false;
        }
        // Allowed file types
        const allowedTypes = [
            'image/jpeg', 'image/png', 'image/gif', 'image/jpg',
            'application/pdf',
            'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'text/plain',
            'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ];
        for(var index=0; index< files.length; index++) {
            if(!allowedTypes.includes(files[index].type)) {
                Modal.uploadFileModal.uploadFiles.addClass("is-invalid");
                Modal.uploadFileModal.uploadFiles.closest(".invalid-feedback").append("Invalid file type. Allowed types: JPG, PNG, PDF, DOC, DOCX, TXT, XLS, XLSX.");
                return;
            }
            if (files[index].size > (10 * 1024 * 1024)) {
                Modal.uploadFileModal.uploadFiles.addClass("is-invalid");
                Modal.uploadFileModal.uploadFiles.closest(".invalid-feedback").append("File size exceeds 10MB limit.");
                return false;
            }
        }
        var formData = new FormData();
        for (let i = 0; i < files.length; i++) {
            formData.append('files', files[i]);
        }
        let callBack = function(response) {
            if(response.success) {
                Modal.uploadFileModal.id.modal('hide');
                Drive.refresh("File uploaded successfully!");
            }
        };
        AjaxUtil.UPLOAD({
             url: File.context + "/api/file/upload/"+Folder.selected,
             formData: formData,
             callBack: callBack
        });
    };
    this.resetInvalidate = function(e) {
        e.preventDefault();
        Modal.uploadFileModal.uploadFiles.removeClass("is-invalid");
    };
    this.initialize = function() {
        this.context = $("#container").data("context");
        Modal.uploadFileModal.btnSave.on("click", File.upload);
        Modal.uploadFileModal.uploadFiles.on("change", File.resetInvalidate);
        Modal.uploadFileModal.btnCancel.on("click", File.resetInvalidate);
        Modal.uploadFileModal.btnClose.on("click", File.resetInvalidate);
    };
};


const Drive = new function() {
    this.refresh = function(message) {
        if(message) {
            Message.success(message);
            if(Folder.selected != "0") {
                Folder.open(Folder.selected);
            }else {
                setTimeout(function() {Folder.refresh();}, 1500);
            }
        }else if(Folder.selected != "0") {
            Folder.open(Folder.selected);
        }else {
            Folder.refresh();
        }
    };
    this.events = function() {
        $(".folder-name").on("click", function(e) {
            e.preventDefault();
            Folder.open($(this).attr("id"));
        });
        $(".folder-name, .file-name").on("contextmenu", function(e) {
            e.preventDefault();
            $(".position-relative").find(".dropdown-menu").removeClass("d-block");
            var mouseX = e.clientX;
            var elOffsetLeft = $(this).offset().left;
            $(this).parent(".position-relative").find(".dropdown-menu").css({left: (mouseX-elOffsetLeft)+50 + 'px', top:'0px'}).addClass('d-block');
        });
        $(document).on("click", function(e) {
            $(".position-relative").find(".dropdown-menu").removeClass("d-block");
        });
        $(".position-relative").find(".dropdown-menu").on("click", function(e) {
            e.preventDefault();
            $(this).removeClass("d-block");
        });
        $(".open-file").on("click", function(e) {
            e.preventDefault();
            File.show(this);
        });
        $(".download").on("click", function(e) {
            e.preventDefault();
            File.download($(this).attr("id"), $(this).attr("name"));
        });
        $(".share-file").on("click", function(e) {
            e.preventDefault();
            File.share(this);
        });
        $(".delete-file").on("click", function(e) {
            e.preventDefault();
            File.delete($(this).attr("id"), $(this).attr("name"));
        });
        $(".file-properties").on("click", function(e) {
            e.preventDefault();
            File.properties($(this).attr("id"), $(this).attr("name"));
        });
        $(".file-shared-with").on("click", function(e) {
            e.preventDefault();
            File.sharedWith($(this).attr("id"), $(this).attr("name"));
        });
        $(".file-shared-by").on("click", function(e) {
            e.preventDefault();
            File.sharedBy($(this).attr("id"), $(this).attr("name"));
        });
        $(".rename-file").on("click", function(e) {
            e.preventDefault();
            File.rename($(this).attr("id"), $(this).attr("name"));
        });
        $(".folder-properties").on("click", function(e) {
            e.preventDefault();
            Folder.properties($(this).attr("id"), $(this).attr("name"));
        });
        $(".btnView").on("click", function(e) {
            e.preventDefault();
            let callBack = function(response) {
                if(response.success) {
                    if(Folder.selected != "0") {
                        Folder.open(Folder.selected);
                    }else {
                        Folder.refresh();
                    }
                }
            };
            AjaxUtil.POST({
                url: Drive.context+"/api/drive/view",
                data: {keyword: "DRIVE_DEFAULT_VIEW", value: $(this).data("value")},
                callBack: callBack
            });
        });
        $(".btnNewFolder").on("click", function(e){
            e.preventDefault();
            $('#folder-name').val("");
        });
        $(".btnNewFile").on("click", function(e){
            e.preventDefault();
            $('#fileSelected').val("");
        });
    };
    this.open = function(response) {
        var data = response.data;
        Drive.container.empty();
        if(response.data) {
            $(".btnView").removeClass("active");
            if(response.data.view) {
                $(".btnView").each(function() {
                    if($(this).data("value") == response.data.view) {
                        $(this).addClass("active");
                    }
                });
            }
            var folder = response.data.folder;
            $(".breadcrumb").empty().append(HTMLStyle.breadcrumb(Drive.context, response.data.breadcrumb, true));
            var folders = folder.subFolders;
            var divRow = $("<div/>").attr({class: "row mx-0 justify-content-between gap-4"});
            for(let index = 0; index < folders.length; index++) {
                divRow.append(HTMLStyle.createFolder(folders[index], response.data.view));
            }
            if(folders.length > 0) {
                 Drive.container.append("<h6>Folders</h6>");
                 Drive.container.append(divRow);
            }
            var files = folder.files;
            var divFileRow = $("<div/>").attr({class: "row mx-0 justify-content-between gap-4"});
            for(let index = 0; index < files.length; index++) {
                divFileRow.append(HTMLStyle.createFile(files[index], response.data.view, false, false, false));
            }
            if(files.length > 0) {
                if(folders.length > 0) {
                   Drive.container.append("<h6 class='mt-4'>Files</h6>");
                }else {
                   Drive.container.append("<h6>Files</h6>");
                }
                Drive.container.append(divFileRow);
            }
            if(folders.length == 0 && files.length == 0 ) {
                Drive.container.append("It looks like your folder is currently empty.");
            }
        }
        Drive.events();
    };

    this.load = function(response) {        
        Drive.container.empty();
        if(response.data) {
            $(".btnView").removeClass("active");
            if(response.data.view) {
                $(".btnView").each(function() {
                    if($(this).data("value") == response.data.view){
                        $(this).addClass("active");
                    }
                });
            }
            $(".breadcrumb").empty().append(HTMLStyle.breadcrumb(Drive.context, response.data.breadcrumb, true));
            var folders = response.data.folders;
            var divRow = $("<div/>").attr({class: "row mx-0 justify-content-between gap-4"});
            for(let index = 0; index < folders.length; index++) {
                divRow.append(HTMLStyle.createFolder(folders[index], response.data.view));
            }
            if(folders.length > 0) {
                 Drive.container.append("<h6>Folders</h6>");
                 Drive.container.append(divRow);
            }
            var files = response.data.files;
            var divFileRow = $("<div/>").attr({class: "row mx-0 justify-content-between gap-4"});
            for(let index = 0; index < files.length; index++) {
                divFileRow.append(HTMLStyle.createFile(files[index], response.data.view, false, false, false));
            }
            if(files.length > 0) {
                if(folders.length > 0) {
                   Drive.container.append("<h6 class='mt-4'>Files</h6>");
                }else {
                   Drive.container.append("<h6>Files</h6>");
                }
                Drive.container.append(divFileRow);
            }
            if(folders.length == 0 && files.length == 0 ) {
                Drive.container.append("It looks like your drive is currently empty.");
            }
            var sharedFilesWithU = response.data.sharedFilesWithYou;
            if(sharedFilesWithU.length > 0) {
                var divSharedFileWithURow = $("<div/>").attr({class: "row mx-0 justify-content-between gap-4"});
                for(let index = 0; index < sharedFilesWithU.length; index++) {
                    divSharedFileWithURow.append(HTMLStyle.createFile(sharedFilesWithU[index].file, response.data.view, true, false, true));
                }
                Drive.container.append("<h6 class='mt-4'>Shared files with you</h6>");
                Drive.container.append(divSharedFileWithURow);
            }
            var sharedFilesByU = response.data.sharedFilesByYou;
            if(sharedFilesByU.length > 0) {
                var divSharedFileByURow = $("<div/>").attr({class: "row mx-0 justify-content-between gap-4"});
                for(let index = 0; index < sharedFilesByU.length; index++) {
                    divSharedFileByURow.append(HTMLStyle.createFile(sharedFilesByU[index].file, response.data.view, true, true, false));
                }
                Drive.container.append("<h6 class='mt-4'>Shared files by you</h6>");
                Drive.container.append(divSharedFileByURow);
            }
        }
        Drive.container.css({"max-height": ($(window).height()-270)+"px", "overflow":"overlay"});
        Drive.events();
    };
    this.initialize = function() {
        this.context = $("#container").data("context");
        this.container = $(".driveContent");
        AjaxUtil.GET({
            url: Drive.context+"/api/drive",
            callBack: Drive.load
        });
    };
};

const Bin = new function() {
    this.contextOfFile = function(file) {
        const ul = $("<ul/>").attr({class: "dropdown-menu w-auto position-absolute file-context"});

        const aDelete = $("<a/>").attr({class: "dropdown-item delete-file", href: "javascript:;", id: file.id, name: file.originalName}).append("Permanently Delete");
        //aDelete.attr("data-id", file.id);
        const liDelete = $("<li/>").append(aDelete);
        ul.append(liDelete);

        const aRestore = $("<a/>").attr({class: "dropdown-item restore-file", href: "javascript:;", id: file.id, name: file.originalName}).append("Restore");
        //aRestore.attr("data-id", file.id);
        const liRestore = $("<li/>").append(aRestore);
        ul.append(liRestore);

        const aProperties = $("<a/>").attr({class: "dropdown-item file-properties", href: "javascript:;", id: file.id, name: file.originalName}).append("Properties");
        const liProperties = $("<li/>").append(aProperties);
        ul.append(liProperties);
        return ul;
    };
    this.createFile = function(file) {
        var rowClasses = "col-sm-5 col-md-5 col-lg-5 col-xl-5 col-xxl-5";
        var nameClasses = "col-sm-11 col-md-11 col-lg-11 col-xl-11 col-xxl-11";
        var iconClasses = "col-sm-1 col-md-1 col-lg-1 col-xl-1 col-xxl-1";
        if(($(window).width() <= 1024)) {
            rowClasses = "col-sm-12 col-md-12 col-lg-12 col-xl-12 col-xxl-12";
            nameClasses = "col-sm-7 col-md-7 col-lg-7 col-xl-7 col-xxl-7 pt-2";
            iconClasses = "col-sm-1 col-md-1 col-lg-1 col-xl-1 col-xxl-1 w-auto pt-2";
        }
        const divCol = $("<div/>").attr({class: rowClasses+" col-xxl-5 py-2 border border-1 rounded-1"});
        const divColR = $("<div/>").attr({class: "row position-relative"});
        const divColIcon = $("<div/>").attr({class: iconClasses});
        const divColCheck = $("<div/>").attr({class: "form-check"});
        const input = $("<input/>").attr({type: "checkbox", class:"form-check-input bin-check", id:"checkFile_"+file.id});
        input.attr("data-id", file.id);
        divColCheck.append(input);
        divColIcon.append(divColCheck);
        divColR.append(divColIcon);
        const divColName = $("<a/>").attr({class: nameClasses+" file-name open-file text-decoration-none text-dark text-ellipsis", href: "javascript:;", id: file.id, name: file.originalName, title: "Right-click for more actions.", for:"checkFile_"+file.id});
        divColName.attr("data-type", File.type(file.name));
        //divColName.attr("data-shared", f);
        divColName.append(file.originalName);
        divColR.append(divColName);

        divColR.append(Bin.contextOfFile(file));
        divCol.append(divColR);
        return divCol;
    };
    this.events = function() {
        $(".file-name").on("contextmenu", function(e) {
            e.preventDefault();
            $(".position-relative").find(".dropdown-menu").removeClass("d-block");
            var mouseX = e.clientX;
            var elOffsetLeft = $(this).offset().left;
            $(this).parent(".position-relative").find(".dropdown-menu").css({left: (mouseX-elOffsetLeft)+50 + 'px', top:'0px'}).addClass('d-block');
        });
        $(document).on("click", function(e) {
            $(".position-relative").find(".dropdown-menu").removeClass("d-block");
        });
        $(".position-relative").find(".dropdown-menu").on("click", function(e) {
            e.preventDefault();
            $(this).removeClass("d-block");
        });
        $(".select-all").on("click", function(e){
            e.preventDefault();
            $(".bin-check").each(function(i){
                $(this).prop("checked", true);
            });
            $(".select-all").addClass("d-none");
            $(".unselect-all").removeClass("d-none");
            $(".restore-selected").removeClass("d-none");
            $(".delete-selected").removeClass("d-none");
        });
        $(".unselect-all").on("click", function(e){
            e.preventDefault();
            $(".bin-check").each(function(i){
                $(this).prop("checked", false);
            });
            $(".unselect-all").addClass("d-none");
            $(".select-all").removeClass("d-none");
            $(".restore-selected").addClass("d-none");
            $(".delete-selected").addClass("d-none");
        });
        $(".bin-check").on("click", function(e) {
            //e.preventDefault();
            var count = 0;
            $(".bin-check").each(function(i){
                if($(this).is(":checked")) {
                    count++;
                }
            });
            if(count == 0) {
                $(".restore-selected").addClass("d-none");
                $(".delete-selected").addClass("d-none");
                $(".unselect-all").addClass("d-none");
                $(".select-all").removeClass("d-none");
            }else if(Bin.fileCount == count){
                $(".restore-selected").removeClass("d-none");
                $(".delete-selected").removeClass("d-none");
                $(".unselect-all").removeClass("d-none");
                $(".select-all").addClass("d-none");
            }else {
                $(".restore-selected").removeClass("d-none");
                $(".delete-selected").removeClass("d-none");
                $(".unselect-all").removeClass("d-none");
                $(".select-all").removeClass("d-none");
            }
        });
        $(".restore-selected").on("click", function(e){
            e.preventDefault();
            var ids = [];
            $(".bin-check").each(function(i){
                $(this).prop("checked", false);
                ids.push($(this).data("id"));
            });
            let callBackConfirm = function() {
                let callBack = function(response) {
                    Message.success("All selected files from the bin were restored successfully.");
                    Folder.refresh();
                };
                AjaxUtil.POST({
                    url: Bin.context+"/api/bin/restore",
                    data: ids,
                    callBack: callBack
                });
            };
            Message.confirm("Yes, Restore!", "Are you sure you want to restore selected files from the bin?", callBackConfirm);
        });
        $(".delete-selected").on("click", function(e){
            e.preventDefault();
            var ids = [];
            $(".bin-check").each(function(i){
                $(this).prop("checked", false);
                ids.push($(this).data("id"));
            });
            let callBackConfirm = function() {
                let callBack = function(response) {
                    Message.success("All files from the bin were restored successfully.");
                    Folder.refresh();
                };
                AjaxUtil.POST({
                    url: Bin.context+"/api/bin/delete",
                    data: ids,
                    callBack: callBack
                });
            };
            Message.confirm("Yes, Delete Permanently!", "This will permanently delete the selected file(s). Are you sure? This action cannot be undone.", callBackConfirm);
        });
        $(".restore-all").on("click", function(e){
            e.preventDefault();
            let callBackConfirm = function() {
                let callBack = function(response) {
                    Message.success("All files from the bin were restored successfully.");
                    Folder.refresh();
                };
                AjaxUtil.GET({
                    url: Bin.context+"/api/bin/restore/all",
                    callBack: callBack
                });
            };
            Message.confirm("Yes, Restore all files!", "Are you sure you want to restore all files from the bin?", callBackConfirm);
        });
        $(".delete-all").on("click", function(e){
            e.preventDefault();
            let callBackConfirm = function() {
                let callBack = function(response) {
                    Message.success("The bin has been emptied successfully.");
                    Folder.refresh();
                };
                AjaxUtil.DELETE({
                    url: Bin.context+"/api/bin/delete/all",
                    callBack: callBack
                });
            };
            Message.confirm("Yes, Delete Permanently!", "This will permanently delete all the file(s). Are you sure? This action cannot be undone.", callBackConfirm);
        });
        $(".restore-file").on("click", function(e){
            e.preventDefault();
            var id = $(this).attr("id");
            let callBackConfirm = function() {
                let callBack = function(response) {
                    Message.success("File from the bin were restored successfully.");
                    Folder.refresh();
                };
                AjaxUtil.DELETE({
                    url: Bin.context+"/api/bin/restore/"+id,
                    callBack: callBack
                });
            };
            Message.confirm("Yes, Restore all files!", "Are you sure you want to restore file from the bin?", callBackConfirm);
        });
        $(".delete-file").on("click", function(e){
            e.preventDefault();
            var id = $(this).attr("id");
            let callBackConfirm = function() {
                let callBack = function(response) {
                    Message.success("File permanently deleted successfully.");
                    Folder.refresh();
                };
                AjaxUtil.DELETE({
                    url: Bin.context+"/api/bin/delete/"+id,
                    callBack: callBack
                });
            };
            Message.confirm("Yes, Delete Permanently!", "This file will be permanently deleted. Are you sure? This action cannot be undone.", callBackConfirm);
        });
        $(".file-properties").on("click", function(e) {
            e.preventDefault();
            File.context = Bin.context;
            File.properties($(this).attr("id"), $(this).attr("name"));
        });
    };
    this.load = function(response) {
        if(response.success && response.data && response.data.files && response.data.files.length > 0) {
            Bin.fileCount = response.data.files.length;
            Bin.container.empty();
            var files = response.data.files;
            var divFileRow = $("<div/>").attr({class: "row mx-0 justify-content-between gap-4"});
            for(let index = 0; index < files.length; index++) {
                divFileRow.append(Bin.createFile(files[index]));
            }
            Bin.container.append(divFileRow);
            Bin.events();
            $(".event-row").removeClass("d-none");
        }
    };
    this.initialize = function() {
        this.context = $("#container").data("context");
        this.container = $("#binContainer");
        this.fileCount = 0;
        AjaxUtil.GET({url: Bin.context+"/api/bin", callBack: Bin.load});
    };
};
if($("#container").data("page") === "bin") {
    Bin.initialize();
}
if($("#container").data("page") === "default") {
    Folder.initialize();
    Drive.initialize();
    File.initialize();
}