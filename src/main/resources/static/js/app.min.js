'use strict';

const Folder = new function() {
    this.selected = "0";
    this.refresh = function() {
        window.location.reload();
    };
    this.open = function(folderId) {
        Folder.selected = folderId;
        AjaxUtil.GET({
            url: Folder.context+"/api/drive/"+folderId,
            callBack: Drive.open
        });
    };
    this.properties = function(id, folderName) {
        var myModal = new bootstrap.Modal(document.getElementById('fileViewModal'), {
            keyboard: false
        });
        $("#fileViewModal").find(".modal-title").empty().append("<i class='fa fa-folder text-success'></i> ").append("Folder Properties");
        $("#fileViewModal").find(".modal-dialog").removeClass("modal-xl");
        $("#fileViewModal").find(".modal-dialog").addClass("modal-lg");
        $("#fileViewModal").find(".modal-body").empty();
        let callBack = function(response) {
            if(response.success) {
                var property = response.data.property;
                const mainDiv = $("<div/>");
                mainDiv.append(File.buildProp("Name", property.name));
                mainDiv.append(File.buildProp("Folders", property.folders));
                mainDiv.append(File.buildProp("Files", property.files));
                mainDiv.append(File.buildProp("Size", File.convertKbToMb(property.size)));
                mainDiv.append(File.buildProp("Created Date Time", property.createdDateTime));
                $("#fileViewModal").find(".modal-body").append(mainDiv);
                myModal.show();
            }
        };
        AjaxUtil.GET({
            url: File.context+"/api/folder/"+id,
            callBack: callBack
        });
    };
    this.initialize = function() {
        this.context = $("#container").data("context");
        this.selected = "0";
        $(".btnCreateFolder").on("click", function(e) {
            e.preventDefault();
            if($("#folder-name").val().trim() != "") {
                var callBack = function(response) {
                    if(response.success) {
                       Folder.open(response.persistId);
                       $('#createFolderModal').modal('hide');
                       Message.success("Folder created successfully!");
                    }
                };
                AjaxUtil.POST({
                    url: Folder.context+"/api/folder",
                    data: {name: $("#folder-name").val(), parent :{id: Folder.selected}},
                    callBack: callBack
                });
            }else {
                $("#folder-name").addClass("is-invalid");
            }
        });
        $("#folder-name").on("focus", function(e){
            e.preventDefault();
            $(this).removeClass("is-invalid");
        });
        $(".btn-close, .btnCancelFolder").on("click", function(e) {
            e.preventDefault();
            $("#folder-name").removeClass("is-invalid");
            $("#folder-name").val("");
        });
    };
};
const File = new function() {
    this.getType = function(type) {
        const allowedTypes = {
            'image/jpeg': 'Image (.jpeg)',
            'image/png': 'Image (.png)',
            'image/gif': 'Image (.gif)',
            'image/jpg': 'Image (.jpg)',
            'application/pdf': 'Portable Document Format (.pdf)',
            'application/msword': 'Microsoft Word Document (.docx)',
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'Microsoft Word Document (.docx)',
            'text/plain': 'Text Document (.txt)',
            'application/vnd.ms-excel': 'Microsoft Excel Worksheet (.xlsx)',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'Microsoft Excel Worksheet (.xlsx)'
        };
        return allowedTypes[type];
    };
    this.upload = function(folderId) {
        var fileInput = $('#fileSelected')[0].files[0];
        var formData = new FormData();
        formData.append('file', fileInput);
        if(fileInput === undefined) {
            $("#fileSelected").addClass("is-invalid");
            $("#fileSelected").closest(".invalid-feedback").append("Please choose a file or valid file. Allowed types: JPG, PNG, PDF, DOC, DOCX, TXT, XLS, XLSX.");
            return false;
        }
        // Allowed file types
        const allowedTypes = [
            'image/jpeg', 'image/png', 'image/gif', 'image/jpg',
            'application/pdf',
            'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'text/plain',
            'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ];
        if(!allowedTypes.includes(fileInput.type)) {
            $("#fileSelected").addClass("is-invalid");
            $("#fileSelected").closest(".invalid-feedback").append("Invalid file type. Allowed types: JPG, PNG, PDF, DOC, DOCX, TXT, XLS, XLSX.");
            return;
        }
        if (fileInput.size > (10 * 1024 * 1024)) {
            $("#fileSelected").addClass("is-invalid");
            $("#fileSelected").closest(".invalid-feedback").append("File size exceeds 10MB limit.");
            return false;
        }
        let callBack = function(response) {
            if(response.success) {
                $('#uploadFileModal').modal('hide');
                Drive.refresh("File uploaded successfully!");
            }
        };
        AjaxUtil.UPLOAD({
             url: File.context + "/api/file/upload/"+folderId,
             formData: formData,
             callBack: callBack
        });
    };
    this.fileIcons = {
       'pdf': 'fa-file-pdf', // CSS class for PDF icon
       'doc': 'fa-file-word', // CSS class for Word icon
       'docx': 'fa-file-word', // CSS class for Word icon
       'xls': 'fa-file-excel', // CSS class for Excel icon
       'xlsx': 'fa-file-excel', // CSS class for Excel icon
       'jpg': 'fa-image', // CSS class for JPEG icon
       'jpeg': 'fa-image', // CSS class for JPEG icon
       'png': 'fa-image', // CSS class for PNG icon
       'gif': 'fa-image', // CSS class for GIF icon
       'txt': 'fa-file-lines', // CSS class for Text file icon
       'default': 'fa-file' // CSS class for default icon
    };
    this.getFileExtension = function(fileName) {
        return fileName.split('.').pop().toLowerCase();
    };
    this.icon = function(fileName) {
        const ext = File.getFileExtension(fileName);
        return File.fileIcons[ext] || File.fileIcons["default"];
    };
    this.isPdf = function(fileName) {
        var icons = {
           'pdf': 'fa-file-pdf'
        };
        const ext = File.getFileExtension(fileName);
        if(icons[ext]) {
            return true;
        } else {
            return false;
        }
    };
    this.isDoc = function(fileName) {
        var icons = {
           'doc': 'fa-file-word',
           'docx': 'fa-file-word'
        };
        const ext = File.getFileExtension(fileName);
        if(icons[ext]) {
            return true;
        } else {
            return false;
        }
    };
    this.isXls = function(fileName) {
        var icons = {
           'xls': 'fa-file-excel',
           'xlsx': 'fa-file-excel'
        };
        const ext = File.getFileExtension(fileName);
        if(icons[ext]) {
            return true;
        } else {
            return false;
        }
    };
    this.isImage = function(fileName) {
        var imageIcons = {
           'jpg': 'fa-image',
           'jpeg': 'fa-image',
           'png': 'fa-image',
           'gif': 'fa-image'
        };
        const ext = File.getFileExtension(fileName);
        if(imageIcons[ext]) {
            return true;
        } else {
            return false;
        }
    };
    this.show = function(id, fileName, type, shared) {
        var myModal = new bootstrap.Modal(document.getElementById('fileViewModal'), {
            keyboard: false
        });
        $("#fileViewModal").find(".modal-title").empty().append("<i class='fa "+File.icon(fileName)+" text-success'></i> ").append(fileName);
        $("#fileViewModal").find(".modal-body").empty();
        $("#fileViewModal").find(".modal-body").addClass("text-center");
        $("#fileViewModal").find(".modal-dialog").addClass("modal-xl");
        $("#fileViewModal").find(".modal-dialog").removeClass("modal-lg");
        if(type === "image") {
            const image = $("<img/>").attr({src: File.context+"/api/file/image/"+id+"?shared="+shared, class: "img-fluid"});
            $("#fileViewModal").find(".modal-body").append(image);
        }else if(type === "pdf") {
            const canvas = $("<canvas/>").attr({id: "pdf-canvas"});
            $("#fileViewModal").find(".modal-body").append(canvas);
            const pdfjsLib = window['pdfjs-dist/build/pdf'];
            pdfjsLib.GlobalWorkerOptions.workerSrc = File.context+'/js/thirdparty/pdf.worker.min.js';
            const url = File.context+"/api/file/pdf/"+id+"?shared="+shared;
            pdfjsLib.getDocument(url).promise.then((pdf) => {
                pdf.getPage(1).then((page) => {
                    const scale = 1.5;
                    const viewport = page.getViewport({ scale });
                    const canvas = document.getElementById('pdf-canvas');
                    const context = canvas.getContext('2d');
                    canvas.height = viewport.height;
                    canvas.width = viewport.width;
                    const renderContext = {
                        canvasContext: context,
                        viewport: viewport
                    };
                    page.render(renderContext);
                });
            });
        }else if(type === "doc") {
            async function showDoc() {
                function display(result) {
                     $("#fileViewModal").find(".modal-body").removeClass("text-center");
                     $("#fileViewModal").find(".modal-body").html(result.value);
                }
                function showError(e) {}
                const response = await fetch(File.context+"/api/file/other/"+id+"?shared="+shared);
                if (!response.ok) {
                    text.textContent = 'Error: Unable to fetch the file.';
                    return;
                }
                const arrayBuffer = await response.arrayBuffer();
                mammoth.convertToHtml({ arrayBuffer: arrayBuffer })
                .then(display)
                .catch(showError);
            }
            showDoc();
        }else if(type === "xls") {
            async function showXls() {
                const response = await fetch(File.context+"/api/file/other/"+id+"?shared="+shared);
                if (!response.ok) {
                    document.getElementById('output').innerHTML = 'Error: Unable to fetch the file.';
                    return;
                }
                const arrayBuffer = await response.arrayBuffer();
                const workbook = XLSX.read(arrayBuffer, { type: 'array' });
                let html = '';
                workbook.SheetNames.forEach(sheetName => {
                    const worksheet = workbook.Sheets[sheetName];
                    html += XLSX.utils.sheet_to_html(worksheet);
                });
                $("#fileViewModal").find(".modal-body").removeClass("text-center");
                $("#fileViewModal").find(".modal-body").html(html);
                $("#fileViewModal").find(".modal-body").find("table").find("td").addClass("border");
            }
            showXls();
        }else if(type === "txt") {
            async function showText() {
                const text = document.createElement('pre');
                const response = await fetch(File.context+"/api/file/other/"+id+"?shared="+shared);
                if (!response.ok) {
                    text.textContent = 'Error: Unable to fetch the file.';
                    return;
                }
                const arrayBuffer = await response.arrayBuffer();
                const textDecoder = new TextDecoder();
                text.textContent = textDecoder.decode(arrayBuffer);
                $("#fileViewModal").find(".modal-body").removeClass("text-center");
                $("#fileViewModal").find(".modal-body").append(text);
            }
            showText();
        }
        myModal.show();
    };
    this.share = function(id, filename) {
        var fileId = id;
        var myModal = new bootstrap.Modal(document.getElementById('fileShareModal'), {
            keyboard: false
        });
        $("#fileShareModal").find(".modal-title").empty().append("<i class='fa "+File.icon(filename)+" text-success'></i> ").append(filename);
        $("#fileShareModal").find(".modal-body").empty();
        const divInput = $("<div/>").attr({class: "mb-3 mt-3"});
        divInput.append("<label>Email:</label>");
        const input = $("<input/>").attr({type: "text", class: "form-control search-users", placeholder: "Search by email"});
        divInput.append(input);
        divInput.append($("<div/>").attr({class: "user-results list-group"}));
        $("#fileShareModal").find(".modal-body").append(divInput);
        const divSelectedUsers = $("<div/>").attr({class: "mb-3 mt-3 selected-users"});
        $("#fileShareModal").find(".modal-body").append(divSelectedUsers);
        $("#fileShareModal").find(".modal-body").find(".search-users").on("blur", function(e) {
            setTimeout(function() {$("#fileShareModal").find(".modal-body").find(".user-results").empty();}, 1000);
        });
        $("#fileShareModal").find(".search-users").on("keyup", function(e) {
            var query = $(this).val();
            var callBack = function(response) {
                $("#fileShareModal").find(".modal-body").find(".user-results").empty();
                if(response.data) {
                    if(response.data.length > 0) {
                        for(let index=0; index<response.data.length; index++) {
                            const displayName = response.data[index].firstName +" "+response.data[index].lastName;
                            const a = $("<a/>").attr({class: "list-group-item list-group-item-action event", href:"javascript:;", id: response.data[index].id, name: displayName});
                            a.append(response.data[index].email).append(" (").append(displayName).append(")");
                            $("#fileShareModal").find(".modal-body").find(".user-results").append(a);
                        }
                    }else {
                        const a = $("<a/>").attr({class: "list-group-item list-group-item-action", href:"javascript:;"});
                        a.append("No user found.");
                        $("#fileShareModal").find(".modal-body").find(".user-results").append(a);
                    }
                    $("#fileShareModal").find(".modal-body").find(".user-results").find(".list-group-item-action.event").on("click", function(e) {
                        e.preventDefault();
                        const a = $("<a/>").attr({class: "btn-remove text-white", href:"javascript:;", id: $(this).attr("id")}).append('<i class="fa fa-xmark"></i>');
                        const span = $("<span/>").attr({class: "btn btn-dark selected-user-"+$(this).attr("id"), id: $(this).attr("id")}).append($(this).attr("name")).append("&nbsp;&nbsp;").append(a);
                        $("#fileShareModal").find(".modal-body").find(".selected-users").append(span);
                        $("#fileShareModal").find(".modal-body").find(".user-results").empty();
                        $("#fileShareModal").find(".modal-body").find(".search-users").val("");
                        $("#fileShareModal").find(".modal-body").find(".selected-users").find(".btn-remove").on("click", function(e){
                            e.preventDefault();
                            $("#fileShareModal").find(".modal-body").find(".selected-users").find(".selected-user-"+$(this).attr("id")).remove();
                        });
                    });
                }
            };
            AjaxUtil.GET({
                url: File.context+"/api/user/search?keyword="+query,
                callBack: callBack
            });
        });
        $("#fileShareModal").find(".btnShareFile").on("click", function(e) {
            e.preventDefault();
            var toUsers = [];
            $("#fileShareModal").find(".modal-body").find(".selected-users").find("span").each(function(index) {
                toUsers.push({id: $(this).attr("id")});
            });
            if(toUsers.length> 0 ) {
                let callBack = function(response) {
                    if(response.success) {
                        myModal.hide();
                        Drive.refresh("File shared successfully!");
                    }
                };
                AjaxUtil.POST({
                    url: File.context+"/api/file/share",
                    data: {toUsers: toUsers, file : {id: fileId}},
                    callBack: callBack
                });
            }else {
                Message.error("Please choose at-least one user.");
            }
        });
        myModal.show();
    };
    this.buildProp = function(label, value) {
        var divRow = $("<div/>").attr({class: "row justify-content-around border-bottom"});
        var divCol = $("<div/>").attr({class: "col-4 border-start"});
        divCol.append(label);
        divRow.append(divCol);

        divCol = $("<div/>").attr({class: "col-8 border-start border-end"});
        divCol.append(value);
        divRow.append(divCol);
        return divRow;
    };
    this.convertKbToMb = function(kb) {
        if(kb == 1024) {
             return "1Mb";
        }else if(kb < 1024) {
            return kb +"Kb";
        }else {
            return (kb/1024) +"Mb";
        }
    };
    this.properties = function(id, fileName) {
        var myModal = new bootstrap.Modal(document.getElementById('fileViewModal'), {
            keyboard: false
        });
        $("#fileViewModal").find(".modal-title").empty().append("<i class='fa "+File.icon(fileName)+" text-success'></i> ").append("File Properties");
        $("#fileViewModal").find(".modal-dialog").removeClass("modal-xl");
        $("#fileViewModal").find(".modal-dialog").addClass("modal-lg");
        $("#fileViewModal").find(".modal-body").empty();
        let callBack = function(response) {
            if(response.success) {
                var file = response.data;
                const mainDiv = $("<div/>");
                mainDiv.append(File.buildProp("Name", file.originalName));
                mainDiv.append(File.buildProp("Type", File.getType(file.type)));
                mainDiv.append(File.buildProp("Location", file.path));
                mainDiv.append(File.buildProp("Size", File.convertKbToMb(file.size)));
                mainDiv.append(File.buildProp("Modified Date Time", file.createdDateTime));
                $("#fileViewModal").find(".modal-body").append(mainDiv);
                myModal.show();
            }
        };
        AjaxUtil.GET({
            url: File.context+"/api/file/"+id,
            callBack: callBack
        });
    };
    this.delete = function(id, filename) {
        let callBackConfirm = function() {
            let callBack = function(response) {
                Drive.refresh("File deleted successfully!");
            };
            AjaxUtil.DELETE({
                url: File.context+"/api/file/"+id,
                callBack: callBack
            });
        };
        Message.confirm("Yes, Delete it!", "Would you like to delete this file?", callBackConfirm);
    };
    this.download = function(id, filename) {
        const link = document.createElement('a');
        link.href = File.context+"/api/file/download/"+id;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
    this.initialize = function() {
        this.context = $("#container").data("context");
        $(".btnUploadFile").on("click", function(e) {
            e.preventDefault();
            File.upload(Folder.selected);
        });
        $("#fileSelected").on("change", function(e) {
            e.preventDefault();
            $(this).removeClass("is-invalid");
        });
        $(".btn-close, .btnCancelFile").on("click", function(e) {
            e.preventDefault();
            $("#fileSelected").removeClass("is-invalid");
        });
    };
};
const HTMLStyle = new function() {
    this.contextOfFolder = function(folder) {
        const ul = $("<ul/>").attr({class: "dropdown-menu w-auto position-absolute end-0"});

        const aOpen = $("<a/>").attr({class: "dropdown-item folder-name", href: "javascript:;", id: folder.id, name: folder.name}).append("Open");
        const liOpen = $("<li/>").append(aOpen);
        ul.append(liOpen);

        const aRename = $("<a/>").attr({class: "dropdown-item disabled", href: "javascript:;", id: folder.id, name: folder.name}).append("Rename");
        const liRename = $("<li/>").append(aRename);
        ul.append(liRename);

        const aDelete = $("<a/>").attr({class: "dropdown-item disabled", href: "javascript:;", id: folder.id, name: folder.name}).append("Delete");
        const liDelete = $("<li/>").append(aDelete);
        ul.append(liDelete);

        const aProperties = $("<a/>").attr({class: "dropdown-item folder-properties", href: "javascript:;", id: folder.id, name: folder.name}).append("Properties");
        const liProperties = $("<li/>").append(aProperties);
        ul.append(liProperties);

        return ul;
    };
    this.fileType = function(fileName) {
        if(File.isImage(fileName)) {
            return "image";
        }else if(File.isPdf(fileName)){
            return "pdf";
        }else if(File.isDoc(fileName)){
            return "doc";
        }else if(File.isXls(fileName)){
            return "xls";
        }else {
            return "txt";
        }
    };
    this.contextOfFile = function(file, shared) {
        const ul = $("<ul/>").attr({class: "dropdown-menu w-auto position-absolute end-0"});

        const aOpen = $("<a/>").attr({class: "dropdown-item open-file ", href: "javascript:;", id: file.id, name: file.originalName}).append("Open");
        aOpen.attr("data-shared", shared);
        aOpen.attr("data-type", HTMLStyle.fileType(file.name));

        const liOpen = $("<li/>").append(aOpen);
        ul.append(liOpen);
        if(!shared) {
            const aShare = $("<a/>").attr({class: "dropdown-item share-file", href: "javascript:;", id: file.id, name: file.originalName}).append("Share");
            const liShare = $("<li/>").append(aShare);
            ul.append(liShare);

            const aRename = $("<a/>").attr({class: "dropdown-item disabled", href: "javascript:;", id: file.id, name: file.originalName}).append("Rename");
            const liRename = $("<li/>").append(aRename);
            ul.append(liRename);

            const aDelete = $("<a/>").attr({class: "dropdown-item delete-file", href: "javascript:;", id: file.id, name: file.originalName}).append("Delete");
            const liDelete = $("<li/>").append(aDelete);
            ul.append(liDelete);
        }
        const aDownload = $("<a/>").attr({class: "dropdown-item download", href: "javascript:;", id: file.id, name: file.originalName}).append("Download");
        aDownload.attr("data-shared", shared);
        const liDownload = $("<li/>").append(aDownload);
        ul.append(liDownload);

        const aProperties = $("<a/>").attr({class: "dropdown-item file-properties", href: "javascript:;", id: file.id, name: file.originalName}).append("Properties");
        aProperties.attr("data-shared", shared);
        const liProperties = $("<li/>").append(aProperties);
        ul.append(liProperties);
        return ul;
    };
    this.createFolder = function(folder) {
        const divCol = $("<div/>").attr({class: "col-sm-5 col-md-5 col-lg-5 col-xl-5 col-xxl-5 py-2 border border-1 rounded-1"});
        const divColR = $("<div/>").attr({class: "row position-relative"});
        const divColIcon = $("<div/>").attr({class: "col-sm-1 col-md-1 col-lg-1 col-xl-1 col-xxl-1"});
        divColIcon.append("<i class='fa fa-folder text-success'></i>")
        divColR.append(divColIcon);
        const divColName = $("<a/>").attr({class: "col-sm-11 col-md-11 col-lg-11 col-xl-11 col-xxl-11 folder-name text-decoration-none text-dark text-ellipsis", href: "javascript:;", id: folder.id, title: folder.name});
        divColName.append(folder.name);
        divColR.append(divColName);
        divColR.append(HTMLStyle.contextOfFolder(folder));
        divCol.append(divColR);
        return divCol;
    };
    this.createFile = function(file, shared) {
        const divCol = $("<div/>").attr({class: "col-sm-5 col-md-5 col-lg-5 col-xl-5 col-xxl-5 py-2 border border-1 rounded-1"});
        const divColR = $("<div/>").attr({class: "row position-relative"});
        const divColIcon = $("<div/>").attr({class: "col-sm-1 col-md-1 col-lg-1 col-xl-1 col-xxl-1"});
        divColIcon.append("<i class='fa "+File.icon(file.name)+" text-success'></i>");
        divColR.append(divColIcon);
        const divColName = $("<a/>").attr({class: "col-sm-11 col-md-11 col-lg-11 col-xl-11 col-xxl-11 file-name open-file text-decoration-none text-dark text-ellipsis", href: "javascript:;", id: file.id, name: file.originalName, title: file.originalName});
        divColName.attr("data-type", HTMLStyle.fileType(file.name));
        divColName.attr("data-shared", shared);
        divColName.append(file.originalName);
        divColR.append(divColName);
        divColR.append(HTMLStyle.contextOfFile(file, shared));
        divCol.append(divColR);
        return divCol;
    };
    this.breadcrumb = function(context, data, active) {
        var elements = "";
        if(data) {
            if(data.prev) {
                elements += HTMLStyle.breadcrumb(context, data.prev, false);
            }
            if(active) {
                elements += "<li class='breadcrumb-item active'>"+data.name+"</li>";
            }else if(data.id){
                elements += "<li class='breadcrumb-item'><a href='javascript:;' class='folder-name text-decoration-none' id='"+data.id+"'>"+data.name+"</a></li>";
            }else {
                elements += "<li class='breadcrumb-item'><a href='"+context+"' class='text-decoration-none'>"+data.name+"</a></li>";
            }
        }
        return elements;
    };
};

const Drive = new function() {
    this.refresh = function(message) {
        if(message) {
            Message.success(message);
        }
        if(Folder.selected != "0") {
            Folder.open(Folder.selected);
        }else {
            setTimeout(function() {Folder.refresh();}, 1500);
        }
    };
    this.events = function() {
        $(".folder-name").on("click", function(e) {
            e.preventDefault();
            Folder.open($(this).attr("id"));
        });
        $(".folder-name, .file-name").on("contextmenu", function(e) {
            e.preventDefault();
            $(".position-relative").find(".dropdown-menu").removeClass("d-block");
            $(this).parent(".position-relative").find(".dropdown-menu").addClass("d-block");
        });
        $(".open-file").on("click", function(e) {
            e.preventDefault();
            File.show($(this).attr("id"), $(this).attr("name"), $(this).data("type"), $(this).data("shared"));
        });
        $(".download").on("click", function(e) {
            e.preventDefault();
            File.download($(this).attr("id"), $(this).attr("name"));
        });
        $(".share-file").on("click", function(e) {
            e.preventDefault();
            File.share($(this).attr("id"), $(this).attr("name"));
        });
        $(".delete-file").on("click", function(e) {
            e.preventDefault();
            File.delete($(this).attr("id"), $(this).attr("name"));
        });
        $(".file-properties").on("click", function(e) {
            e.preventDefault();
            File.properties($(this).attr("id"), $(this).attr("name"));
        });
        $(".folder-properties").on("click", function(e) {
            e.preventDefault();
            Folder.properties($(this).attr("id"), $(this).attr("name"));
        });
        $(".position-relative").find(".dropdown-menu").on("click", function(e) {
            e.preventDefault();
            $(this).removeClass("d-block");
        });
        $(".btnView").on("click", function(e) {
            e.preventDefault();
            let callBack = function(response) {
                if(response.success) {
                    if(Folder.selected != "0") {
                        Folder.open(Folder.selected);
                    }else {
                        Folder.refresh();
                    }
                }
            };
            AjaxUtil.POST({
                url: Drive.context+"/api/drive/view",
                data: {keyword: "DRIVE_DEFAULT_VIEW", value: $(this).data("value")},
                callBack: callBack
            });
        });
    };
    this.open = function(response) {
        var data = response.data;
        $(".driveContent").empty();
        if(response.data) {
            $(".btnView").removeClass("active");
            if(response.data.view) {
                $(".btnView").each(function() {
                    if($(this).data("value") == response.data.view) {
                        $(this).addClass("active");
                    }
                });
            }
            var folder = response.data.folder;
            $(".breadcrumb").empty().append(HTMLStyle.breadcrumb(Drive.context, response.data.breadcrumb, true));
            var folders = folder.subFolders;
            var divRow = $("<div/>").attr({class: "row mx-0 justify-content-between gap-4"});
            for(let index = 0; index < folders.length; index++) {
                divRow.append(HTMLStyle.createFolder(folders[index]));
            }
            if(folders.length > 0) {
                 $(".driveContent").append("<h6>Folders</h6>");
                 $(".driveContent").append(divRow);
            }
            var files = folder.files;
            var divFileRow = $("<div/>").attr({class: "row mx-0 justify-content-between gap-4"});
            for(let index = 0; index < files.length; index++) {
                divFileRow.append(HTMLStyle.createFile(files[index], false));
            }
            if(files.length > 0) {
                if(folders.length > 0) {
                   $(".driveContent").append("<h6 class='mt-4'>Files</h6>");
                }else {
                   $(".driveContent").append("<h6>Files</h6>");
                }
                $(".driveContent").append(divFileRow);
            }
            if(folders.length == 0 && files.length == 0 ) {
                $(".driveContent").append("It looks like your folder is currently empty.");
            }
        }
        Drive.events();
    };

    this.load = function(response) {
        $(".driveContent").empty();
        if(response.data) {
            $(".btnView").removeClass("active");
            if(response.data.view) {
                $(".btnView").each(function() {
                    if($(this).data("value") == response.data.view){
                        $(this).addClass("active");
                    }
                });
            }
            $(".breadcrumb").empty().append(HTMLStyle.breadcrumb(Drive.context, response.data.breadcrumb, true));
            var folders = response.data.folders;
            var divRow = $("<div/>").attr({class: "row mx-0 justify-content-between gap-4"});
            for(let index = 0; index < folders.length; index++) {
                divRow.append(HTMLStyle.createFolder(folders[index]));
            }
            if(folders.length > 0) {
                 $(".driveContent").append("<h6>Folders</h6>");
                 $(".driveContent").append(divRow);
            }
            var files = response.data.files;
            var divFileRow = $("<div/>").attr({class: "row mx-0 justify-content-between gap-4"});
            for(let index = 0; index < files.length; index++) {
                divFileRow.append(HTMLStyle.createFile(files[index], false));
            }
            if(files.length > 0) {
                if(folders.length > 0) {
                   $(".driveContent").append("<h6 class='mt-4'>Files</h6>");
                }else {
                   $(".driveContent").append("<h6>Files</h6>");
                }
                $(".driveContent").append(divFileRow);
            }
            if(folders.length == 0 && files.length == 0 ) {
                $(".driveContent").append("It looks like your drive is currently empty.");
            }
            var sharedFilesWithU = response.data.sharedFilesWithYou;
            if(sharedFilesWithU.length > 0) {
                var divSharedFileWithURow = $("<div/>").attr({class: "row mx-0 justify-content-between gap-4"});
                for(let index = 0; index < sharedFilesWithU.length; index++) {
                    divSharedFileWithURow.append(HTMLStyle.createFile(sharedFilesWithU[index].file, true));
                }
                $(".driveContent").append("<h6 class='mt-4'>Shared files with you</h6>");
                $(".driveContent").append(divSharedFileWithURow);
            }
            var sharedFilesByU = response.data.sharedFilesByYou;
            if(sharedFilesByU.length > 0) {
                var divSharedFileByURow = $("<div/>").attr({class: "row mx-0 justify-content-between gap-4"});
                for(let index = 0; index < sharedFilesByU.length; index++) {
                    divSharedFileByURow.append(HTMLStyle.createFile(sharedFilesByU[index].file, true));
                }
                $(".driveContent").append("<h6 class='mt-4'>Shared files by you</h6>");
                $(".driveContent").append(divSharedFileByURow);
            }
        }
        Drive.events();
    };
    this.initialize = function() {
        this.context = $("#container").data("context");
        AjaxUtil.GET({
            url: Drive.context+"/api/drive",
            callBack: Drive.load
        });
    };
};
if($("#container").data("page")==="default") {
    Folder.initialize();
    Drive.initialize();
    File.initialize();
}